Given a list_of_ints, find the highest_product you can get from three of the integers.
The input list_of_ints will always have at least three integers.

----------------------------

Gotchas
Does your function work with negative numbers? If list_of_ints is [-10, -10, 1, 3, 2][−10,−10,1,3,2] we should return 300300 (which we get by taking -10 * -10 * 3−10∗−10∗3).

We can do this in O(n)O(n) time and O(1)O(1) space.

----------------------------

Breakdown
To brute force ↴
A brute force algorithm simply enumerates all possible answers to the question and checks them for correctness.

It's seldom the most efficient approach, but it can be helpful to consider the time cost of the brute force approach when building an optimized solution. If your solution isn't faster than the brute force approach, it may not be optimal.
an answer we could iterate through list_of_ints and multiply each integer by each other integer, and then multiply that product by each other other integer. This would probably involve nesting 3 loops. But that would be an O(n^3)O(n
​3
​​ ) runtime! We can definitely do better than that.

Because any integer in the list could potentially be part of the greatest product of three integers, we must at least look at each integer. So we're doomed to spend at least O(n)O(n) time.

Sorting the list would let us grab the highest numbers quickly, so it might be a good first step. Sorting takes O(n\lg{n})O(nlgn) time. That's better than the O(n^3)O(n
​3
​​ ) time our brute force approach required, but we can still do better.

Since we know we must spend at least O(n)O(n) time, let's see if we can solve it in exactly O(n)O(n) time.

A great way to get O(n)O(n) runtime is to use a greedy ↴
A greedy algorithm iterates through the problem space taking the optimal solution "so far," until it reaches the end.

The greedy approach is only optimal if the problem has "optimal substructure," which means stitching together optimal solutions to subproblems yields an optimal solution.
approach. How can we keep track of the highest_product_of_three "so far" as we do one walk through the list?

Put differently, for each new current number during our iteration, how do we know if it gives us a new highest_product_of_three?

We have a new highest_product_of_three if the current number times two other numbers gives a product that's higher than our current highest_product_of_three. What must we keep track of at each step so that we know if the current number times two other numbers gives us a new highest_product_of_three?

Our first guess might be:

our current highest_product_of_three
the three_numbers_which_give_highest_product
But consider this example:

  list_of_ints = [1, 10, -5, 1, -100]

Right before we hit -100−100 (so, in our second-to-last iteration), our highest_product_of_three was 1010, and the three_numbers_which_give_highest_product were [10,1,1][10,1,1]. But once we hit -100−100, suddenly we can take -100 * -5 * 10−100∗−5∗10 to get 50005000. So we should have "held on to" that -5−5, even though it wasn't one of the three_numbers_which_give_highest_product.

We need something a little smarter than three_numbers_which_give_highest_product. What should we keep track of to make sure we can handle a case like this?

There are at least two great answers:

Keep track of the highest_2 and lowest_2 (most negative) numbers. If the current number times some combination of those is higher than the current highest_product_of_three, we have a new highest_product_of_three! Which combinations of highest_2, lowest_2, and current must we test? We'll leave that as an exercise.
Keep track of the highest_product_of_2 and lowest_product_of_2 (could be a low negative number). If the current number times one of those is higher than the current highest_product_of_three, we have a new highest_product_of_three!
We'll go with (2). It ends up being slightly cleaner than (1), though they both work just fine.

How do we keep track of the highest_product_of_2 and lowest_product_of_2 at each iteration? (Hint: we may need to also keep track of something else.)

We also keep track of the lowest number and highest number. If the current number times the current highest—or the current lowest, if current is negative—is greater than the current highest_product_of_2, we have a new highest_product_of_2. Same for lowest_product_of_2.

So at each iteration we're keeping track of and updating:

highest_product_of_three
highest_product_of_2
highest
lowest_product_of_2
lowest
Can you implement this in code? Careful—make sure you update each of these variables in the right order, otherwise you might end up e.g. multiplying the current number by itself to get a new highest_product_of_2.

Solution
We use a greedy ↴ approach to solve the problem in one pass. At each iteration we keep track of:

highest_product_of_three
highest_product_of_2
highest
lowest_product_of_2
lowest
When we reach the end, the highest_product_of_three is our answer. We maintain the others because they're necessary for keeping the highest_product_of_three up to date as we walk through the list. At each iteration, the highest_product_of_three is the highest of:

the current highest_product_of_three
current * highest_product_of_2
current * lowest_product_of_2 (if current and lowest_product_of_2 are both low negative numbers, this product is a high positive number).
  from itertools import islice

def highest_product_of_3(list_of_ints):
    if len(list_of_ints) < 3:
        raise Exception('Less than 3 items!')

    # We're going to start at the 3rd item (at index 2)
    # so pre-populate highests and lowests based on the first 2 items.
    # we could also start these as None and check below if they're set
    # but this is arguably cleaner
    highest = max(list_of_ints[0], list_of_ints[1])
    lowest =  min(list_of_ints[0], list_of_ints[1])

    highest_product_of_2 = list_of_ints[0] * list_of_ints[1]
    lowest_product_of_2  = list_of_ints[0] * list_of_ints[1]

    # except this one--we pre-populate it for the first /3/ items.
    # this means in our first pass it'll check against itself, which is fine.
    highest_product_of_three = list_of_ints[0] * list_of_ints[1] * list_of_ints[2]

    # walk through items, starting at index 2
    for current in islice(list_of_ints, 2, None):

        # do we have a new highest product of 3?
        # it's either the current highest,
        # or the current times the highest product of two
        # or the current times the lowest product of two
        highest_product_of_three = max(
            highest_product_of_three,
            current * highest_product_of_2,
            current * lowest_product_of_2)

        # do we have a new highest product of two?
        highest_product_of_2 = max(
            highest_product_of_2,
            current * highest,
            current * lowest)

        # do we have a new lowest product of two?
        lowest_product_of_2 = min(
            lowest_product_of_2,
            current * highest,
            current * lowest)

        # do we have a new highest?
        highest = max(highest, current)

        # do we have a new lowest?
        lowest = min(lowest, current)

    return highest_product_of_three

Complexity
O(n)O(n) time and O(1)O(1) additional space.

Bonus
What if we wanted the highest product of 4 items?
What if we wanted the highest product of kk items?
If our highest product is really big, it could overflow ↴
When you create an integer variable, your computer allocates a fixed number of bits for storing it. Most modern computers use 64 bits. But some numbers are so big they don't fit in 64 bits, like sextillion (a billion trillion), which is 70 digits in binary.

Sometimes we might have a number that does fit in 64 bits, but if we add to it (or multiply it by something, or do another operation) the result might not fit in 64 bits. This is called an integer overflow.

For example, let's say we have just 2 bits to store integers with. So we can only hold the unsigned (non-negative) integers 0-3 in binary:

  00 (0)
01 (1)
10 (2)
11 (3)
What happens if we have 3 (11) and we try to add 1 (01)? The answer is 4 (100) but that requres 3 bits and we only have 2!

In a high-level language like Python, the interpreter might notice this is about to happen and throw an error. In a lower-level language like C, the processor will sort of "do its best" with the bits it has, which can cause some pretty nasty bugs. In our example above, when adding 01 to 11, the processor might take the true result 100 and throw out the highest bit, leaving 00, or it might say "this number can't go any higher" and just return 11.

In some languages, you can reduce the risk of integer overflow by using larger integer types (like long int in C++ or BigInteger in Java). Other modern languages will automatically use larger integer types if your program needs them (like long in Python and Bignum in Ruby).
. How should we protect against this?